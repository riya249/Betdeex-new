/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DayswapperInterface extends ethers.utils.Interface {
  functions: {
    "payToIntroducer(address,uint256[3])": FunctionFragment;
    "payToTree(address,uint256[3])": FunctionFragment;
    "reportVolume(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "payToIntroducer",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "payToTree",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "reportVolume",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "payToIntroducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payToTree", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportVolume",
    data: BytesLike
  ): Result;

  events: {};
}

export class Dayswapper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DayswapperInterface;

  functions: {
    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    "payToIntroducer(address,uint256[3])"(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    "payToTree(address,uint256[3])"(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * use when you want to report volume generated by a user on your platform
     */
    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * use when you want to report volume generated by a user on your platform
     */
    "reportVolume(address,uint256)"(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  /**
   * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
   */
  payToIntroducer(
    _networker: string,
    _rewardRatio: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
   */
  "payToIntroducer(address,uint256[3])"(
    _networker: string,
    _rewardRatio: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
   */
  payToTree(
    _networker: string,
    _rewardRatio: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
   */
  "payToTree(address,uint256[3])"(
    _networker: string,
    _rewardRatio: BigNumberish[],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * use when you want to report volume generated by a user on your platform
   */
  reportVolume(
    _networker: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * use when you want to report volume generated by a user on your platform
   */
  "reportVolume(address,uint256)"(
    _networker: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    "payToIntroducer(address,uint256[3])"(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    "payToTree(address,uint256[3])"(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * use when you want to report volume generated by a user on your platform
     */
    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * use when you want to report volume generated by a user on your platform
     */
    "reportVolume(address,uint256)"(
      _networker: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    "payToIntroducer(address,uint256[3])"(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    "payToTree(address,uint256[3])"(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * use when you want to report volume generated by a user on your platform
     */
    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * use when you want to report volume generated by a user on your platform
     */
    "reportVolume(address,uint256)"(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    payToIntroducer(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    "payToIntroducer(address,uint256[3])"(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    payToTree(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * @param _rewardRatio : percentages to divide reward into [liquid, prepaid, staking]
     */
    "payToTree(address,uint256[3])"(
      _networker: string,
      _rewardRatio: BigNumberish[],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * use when you want to report volume generated by a user on your platform
     */
    reportVolume(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * use when you want to report volume generated by a user on your platform
     */
    "reportVolume(address,uint256)"(
      _networker: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
