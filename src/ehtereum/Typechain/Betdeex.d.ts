/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BetdeexInterface extends ethers.utils.Interface {
  functions: {
    "KYC(address)": FunctionFragment;
    "clonedContracts(uint256)": FunctionFragment;
    "createBet(string,uint8,uint8,uint256,uint256,bool,uint256)": FunctionFragment;
    "emitEndBetEvent(address,uint8,uint256)": FunctionFragment;
    "emitNewBettingEvent(address,uint8,uint256)": FunctionFragment;
    "getNumberOfBets()": FunctionFragment;
    "implementation()": FunctionFragment;
    "isBetValid(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setKYC(address)": FunctionFragment;
    "storageFactory(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "KYC", values: [string]): string;
  encodeFunctionData(
    functionFragment: "clonedContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBet",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitEndBetEvent",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emitNewBettingEvent",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfBets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isBetValid", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setKYC", values: [string]): string;
  encodeFunctionData(
    functionFragment: "storageFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "KYC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clonedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitEndBetEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitNewBettingEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBetValid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKYC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storageFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "EndBetContract(address,address,uint8,uint256)": EventFragment;
    "NewBetEvent(address,address,uint8,uint8,string)": EventFragment;
    "NewBetting(address,address,uint8,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EndBetContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBetEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewBetting"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Betdeex extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BetdeexInterface;

  functions: {
    KYC(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "KYC(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    clonedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "clonedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    createBet(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createBet(string,uint8,uint8,uint256,uint256,bool,uint256)"(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    emitEndBetEvent(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    "emitEndBetEvent(address,uint8,uint256)"(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    emitNewBettingEvent(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    "emitNewBettingEvent(address,uint8,uint256)"(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this function is used for getting total number of bets
     */
    getNumberOfBets(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * this function is used for getting total number of bets
     */
    "getNumberOfBets()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    implementation(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "implementation()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isBetValid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isBetValid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setKYC(user: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setKYC(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    storageFactory(
      _implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "storageFactory(address)"(
      _implementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  KYC(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "KYC(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  clonedContracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "clonedContracts(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createBet(
    _description: string,
    _category: BigNumberish,
    _subCategory: BigNumberish,
    _minimumBetInExaEs: BigNumberish,
    _prizePercentPerThousand: BigNumberish,
    _isDrawPossible: boolean,
    _pauseTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createBet(string,uint8,uint8,uint256,uint256,bool,uint256)"(
    _description: string,
    _category: BigNumberish,
    _subCategory: BigNumberish,
    _minimumBetInExaEs: BigNumberish,
    _prizePercentPerThousand: BigNumberish,
    _isDrawPossible: boolean,
    _pauseTimestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
   */
  emitEndBetEvent(
    _ender: string,
    _result: BigNumberish,
    _gasFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
   */
  "emitEndBetEvent(address,uint8,uint256)"(
    _ender: string,
    _result: BigNumberish,
    _gasFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
   */
  emitNewBettingEvent(
    _bettorAddress: string,
    _choice: BigNumberish,
    _betTokensInExaEs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
   */
  "emitNewBettingEvent(address,uint8,uint256)"(
    _bettorAddress: string,
    _choice: BigNumberish,
    _betTokensInExaEs: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this function is used for getting total number of bets
   */
  getNumberOfBets(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * this function is used for getting total number of bets
   */
  "getNumberOfBets()"(overrides?: CallOverrides): Promise<BigNumber>;

  implementation(overrides?: CallOverrides): Promise<string>;

  "implementation()"(overrides?: CallOverrides): Promise<string>;

  isBetValid(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isBetValid(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setKYC(user: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setKYC(address)"(
    user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  storageFactory(
    _implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "storageFactory(address)"(
    _implementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    KYC(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "KYC(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    clonedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "clonedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createBet(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createBet(string,uint8,uint8,uint256,uint256,bool,uint256)"(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    emitEndBetEvent(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    "emitEndBetEvent(address,uint8,uint256)"(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    emitNewBettingEvent(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    "emitNewBettingEvent(address,uint8,uint256)"(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this function is used for getting total number of bets
     */
    getNumberOfBets(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function is used for getting total number of bets
     */
    "getNumberOfBets()"(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<string>;

    "implementation()"(overrides?: CallOverrides): Promise<string>;

    isBetValid(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isBetValid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setKYC(user: string, overrides?: CallOverrides): Promise<void>;

    "setKYC(address)"(user: string, overrides?: CallOverrides): Promise<void>;

    storageFactory(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "storageFactory(address)"(
      _implementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    EndBetContract(
      _ender: string | null,
      _contractAddress: string | null,
      _result: null,
      _platformFee: null
    ): EventFilter;

    NewBetEvent(
      _deployer: string | null,
      _contractAddress: null,
      _category: BigNumberish | null,
      _subCategory: BigNumberish | null,
      _description: null
    ): EventFilter;

    NewBetting(
      _betAddress: string | null,
      _bettorAddress: string | null,
      _choice: BigNumberish | null,
      _betTokensInExaEs: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    KYC(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "KYC(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    clonedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "clonedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createBet(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createBet(string,uint8,uint8,uint256,uint256,bool,uint256)"(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    emitEndBetEvent(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    "emitEndBetEvent(address,uint8,uint256)"(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    emitNewBettingEvent(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    "emitNewBettingEvent(address,uint8,uint256)"(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this function is used for getting total number of bets
     */
    getNumberOfBets(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function is used for getting total number of bets
     */
    "getNumberOfBets()"(overrides?: CallOverrides): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    "implementation()"(overrides?: CallOverrides): Promise<BigNumber>;

    isBetValid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isBetValid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setKYC(user: string, overrides?: Overrides): Promise<BigNumber>;

    "setKYC(address)"(user: string, overrides?: Overrides): Promise<BigNumber>;

    storageFactory(
      _implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "storageFactory(address)"(
      _implementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    KYC(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "KYC(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clonedContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "clonedContracts(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createBet(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createBet(string,uint8,uint8,uint256,uint256,bool,uint256)"(
      _description: string,
      _category: BigNumberish,
      _subCategory: BigNumberish,
      _minimumBetInExaEs: BigNumberish,
      _prizePercentPerThousand: BigNumberish,
      _isDrawPossible: boolean,
      _pauseTimestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    emitEndBetEvent(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
     */
    "emitEndBetEvent(address,uint8,uint256)"(
      _ender: string,
      _result: BigNumberish,
      _gasFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    emitNewBettingEvent(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
     */
    "emitNewBettingEvent(address,uint8,uint256)"(
      _bettorAddress: string,
      _choice: BigNumberish,
      _betTokensInExaEs: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is used for getting total number of bets
     */
    getNumberOfBets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * this function is used for getting total number of bets
     */
    "getNumberOfBets()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "implementation()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBetValid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBetValid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setKYC(user: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setKYC(address)"(
      user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    storageFactory(
      _implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "storageFactory(address)"(
      _implementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
